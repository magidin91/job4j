 Для анализа программы "Tracker" (https://github.com/magidin91/job4j_tracker) была использована программа "jprofiler".
 Использован Garbage Collection по умолчанию - G1.
 1. При обычном запуске без парметров.
 а)Загружено 3172 класса. Сборка мусора не проводится, т.к. объектов создается мало, и практически не расходуется память.
 Heap:
 free memory - 65 mb
 used memory - 34 mb
 maximum memory - 1610.6 mb

 Eden:
 free memory - 29.3 mb
 used memory - 32.5 mb
 Survivor:
 free memory - 0 mb
 used memory - 1.05 mb
 Old Gen:
 free memory - 37 mb
 used memory - 0.65 mb

 GC activity - 0%
 Запущено 2 потока.
 Всего 441000 объектов = 34 mb

 б) Создаем в цикле 1000000 объектов Item , добавляем в бд.

  После запуска программы прошло 4 сборки мусора. Все 4 сборки были в young generation. Старшей сборки не было.
  Количество использованной памяти а heap увеличивалось волнами от 7 до 60 мб.
  Eden вцелом повторял поведение heap. Survivor на все протяжении программы был пуст. Old gen был занят на 4 mb.
  Это вызвано тем, что новые объекты при заполнении Eden уничтожались, т.к. были недосягаемы,
  и не переходили в другие поколения.

  2. С использованием -Xmx10m
  а)Загружено 3161 класс. Сборка мусора не проводится.
  Heap:
   free memory - 5 mb
   used memory - 5.2 mb
   maximum memory - 10.48 mb

   Eden:
   free memory - 2.1 mb
   used memory - 0 mb

   Survivor:
   free memory - 0.33 mb
   used memory - 0.72 mb

   Old Gen:
   free memory - 3 mb
   used memory - 4.3 mb

   GC activity - 0%
   Запущено 2 потока.

   Всего 119.000 объектов = 5.4 mb mb
   б) Создаем в цикле 10000000 объектов Item, добавляем в бд.
   Сборки мусора проводятся  в молодом поколении.
   Т.к. объекты Item достаточно легкие, GC успешно успевает очистить память от недосягаемых объектов Item.

   в) Создаем в цикле 10000000 объектов Item  и добавляем их в лист, чтобы объекты были досягаемы и не удалялись GC.
   В этом случае GC пытается проводить и малые, и старшие сборки мусора, но не может освободить достаточно памяти -
   heap переполняется, вызывая java.lang.OutOfMemoryError: Java heap space.






